!!!5
%html
  %head
    %meta{charset: "utf-8"}
    %meta{content: "IE=edge,chrome=1", :'http-equiv' => 'X-UA-Compatible'}
    %title= current_page.data.title || 'SICP Distilled'
    %link{ href: "http://fonts.googleapis.com/css?family=Droid+Serif", rel: 'stylesheet', type:'text/css' }
    = stylesheet_link_tag "all"
    %script{src:'https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'}
    %script{type:"text/x-mathjax-config"}
      MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
%body
  .menu--mobile.js-mobile-nav{:'data-target' => "menu", } Menu
  .menu
    %a{href: '/'}
      %img.logo{ src: '/images/sicp2.jpg', alt: "SICP Distilled"}
    %h1.menu__title.done
      %a{href: '/'}
        SICP Distilled

    %ul.menu__list
      %li.done
        %a{href: '/section/licence'}
          %img{alt:"CC by-sa", style:"border-width:0", src: "https://i.creativecommons.org/l/by-sa/4.0/88x31.png"}
          Licence
      %li.done
        %a{href: '/section/donate'}
          %img{alt:"MSF ", style:"border-width:0", src: "/images/msf.jpg", width: '88px'}
          Donate
    %h2 Ch1 - Building Abstractions With Functions
    %ul.menu__list
      %li.done
        %a{href: '/section/1-distilled'}
          Chapter 1 Distilled

      %li.done
        %a{href: '/section/1-intro'}
          Introduction
      %li.done
        %a{href: '/section/1.1'}
          1.1 - The Elements Of Programming
      %ul.menu__list_2
        %li.done
          %a{ href: '/section/1.1.1' }
            Expressions
        %li.done
          %a{ href: '/section/1.1.2' }
            Naming and the Environment
        %li.done
          %a{ href: '/section/1.1.3' }
            Evaluating Combinations
        %li.done
          %a{ href: '/section/1.1.4' }
            Defining New Functions
        %li.done
          %a{ href: '/section/1.1.5' }
            The Substitution Model
        %li.done
          %a{ href: '/section/1.1-exercises' }
            Exercises
        %li.done
          %a{ href: '/section/1.1.6a' }
            Predicates
        %li.done
          %a{ href: '/section/1.1.6b' }
            Conditional Expressions
        %li.done
          %a{ href: '/section/1.1.7' }
            Example: Newtonâ€™s Method
        %li.done
          %a{ href: '/section/1.1.8' }
            Functions as Black-Box Abstractions
      %li.done
        %a{href: '/section/1.2'}
          1.2 - Procedures and the Processes They Generate
      %ul.menu__list_2
        %li.done
          %a{ href: '/section/1.2.1' }
            Linear Recursion and Iteration
        %li.done
          %a{ href: '/section/1.2.2' }
            Tree Recursion
        %li.done
          %a{ href: '/section/1.2.3' }
            Orders of Growth
        %li.done
          %a{ href: '/section/1.2.4' }
            Exponentiation
        %il.done
          %a{ href: '/section/1.2.5' }
            Greatest Common Divisors
        %li.done
          %a{ href: '/section/1.2.6' }
            Example: Testing For Primality
      %li.done
        %a{href: '/section/1.3-higher-order'}
          1.3 Higher Order Functions
      %li.done
        %a{ href: '/section/project-blackjack' }
          Project - Blackjack
    %h2 Ch2 - Building Abstractions With Data
    %ul.menu__list
      %li.done
        %a{href: '/section/2-distilled'}
          Chapter 2 Distilled
      %li.done
        %a{href: '/section/2-intro'}
          Introduction
      %li.done
        %a{href: '/section/2-data-abstraction'}
          Data Abstraction
      %li.done
        %a{href: '/section/2-nothing'}
          Everything From Nothing
      %li
        %a{href: '/section/2-data-abstraction-clj'}
          Data Abstraction, Revisited
      %li
        %a{href: '/section/2-seq-abstraction'}
          The Sequence Abstraction
      %li
        %a{href: '/section/2-data-structures'}
          Clojure's Data Structures
      %li.done
        %a{href: '/section/2-escher'}
          Escher
      %li.done
        %a{href: '/section/project-escher'}
          Project - Escher
      %li
        %a{href: '/section/2-quotation'}
          Quotation
      %li
        %a{href: '/section/2-sets'}
          Representing Sets
      %li
        %a{href: '/section/2-escher'}
          Huffman Encoding Trees
      %li
        %a{href: '/section/2-zippers'}
          Zippers
    %h2 Ch3 - Modularity, Objects, and State
    %h2 Ch4 - Metalinguistic Abstraction
    %ul.menu__list
      %li.done
        %a{href: '/section/4.1'}
          4.1 - The Metacircular Evaluator
      %li.done
        %a{href: '/section/halting'}
          The Halting Problem
      %li
        %a{href: '/section/y'}
          The Y Combinator
      %li
        %a{href: '/section/4.2'}
          4.2 - Lazy Evaluation
      %li
        %a{href: '/section/4.3'}
          4.3 - Nondeterministic Computing
      %li
        %a{href: '/section/4.4'}
          4.4 - Logic Programming

  .container.menu--push
    = yield

  %script{src: "https://cdn.polyfill.io/v1/polyfill.min.js"}
  = javascript_include_tag  "all"
